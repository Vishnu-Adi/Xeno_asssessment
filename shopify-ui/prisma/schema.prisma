generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        Bytes    @id @db.Binary(16)
  name      String
  createdAt DateTime @default(now())

  // back-relations (required to satisfy the "opposite field" error)
  stores        Store[]
  customers     Customer[]
  products      Product[]
  orders        Order[]
  webhookEvents WebhookEvent[]
}

model Store {
  id          BigInt   @id @default(autoincrement())
  tenantId    Bytes    @db.Binary(16)
  shopDomain  String   @db.VarChar(255)
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, shopDomain])
  @@index([tenantId, createdAt])
}

model Customer {
  id                BigInt   @id @default(autoincrement())
  tenantId          Bytes    @db.Binary(16)
  shopifyCustomerId BigInt
  email             String?  @db.VarChar(255)
  firstName         String?  @db.VarChar(120)
  lastName          String?  @db.VarChar(120)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, shopifyCustomerId])
  @@index([tenantId, createdAt])
}

model Product {
  id               BigInt   @id @default(autoincrement())
  tenantId         Bytes    @db.Binary(16)
  shopifyProductId BigInt
  title            String   @db.VarChar(255)
  price            Decimal? @db.Decimal(12, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, shopifyProductId])
  @@index([tenantId, createdAt])
}

enum OrderStatus {
  pending
  fulfilled
  cancelled
}

model Order {
  id                BigInt      @id @default(autoincrement())
  tenantId          Bytes       @db.Binary(16)
  shopifyOrderId    BigInt
  customerShopifyId BigInt?
  totalPrice        Decimal     @db.Decimal(12, 2)
  currency          String      @db.Char(3)
  status            OrderStatus
  createdAt         DateTime
  updatedAt         DateTime    @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, shopifyOrderId])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, createdAt])
}

model WebhookEvent {
  tenantId   Bytes    @db.Binary(16)
  eventId    String   @db.VarChar(64)
  eventType  String   @db.VarChar(64)
  receivedAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([tenantId, eventId])
}
