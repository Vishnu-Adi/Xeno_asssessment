{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///Users/vishnuadithya/Documents/xeno/shopify-mt/apps/frontend/src/lib/env.ts"],"sourcesContent":["import { z } from 'zod';\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n  DATABASE_URL: z.string().url(),\n  SHOPIFY_API_KEY: z.string().min(1),\n  SHOPIFY_API_SECRET: z.string().min(1),\n  SHOPIFY_SCOPES: z.string().min(1),\n  SHOPIFY_APP_URL: z.string().url(),\n  SHOPIFY_REDIRECT_PATH: z.string().default('/api/oauth/callback'),\n  // Email configuration (optional for development)\n  EMAIL_SERVER_HOST: z.string().optional(),\n  EMAIL_SERVER_PORT: z.string().optional(),\n  EMAIL_SERVER_USER: z.string().optional(),\n  EMAIL_SERVER_PASSWORD: z.string().optional(),\n  EMAIL_FROM: z.string().optional(),\n  NEXTAUTH_SECRET: z.string().optional(),\n  NEXTAUTH_URL: z.string().url().optional(),\n});\n\nexport type Env = z.infer<typeof envSchema>;\n\nlet cachedEnv: Env | null = null;\n\nexport function getEnv(): Env {\n  if (cachedEnv) return cachedEnv;\n  const parsed = envSchema.safeParse({\n    NODE_ENV: process.env.NODE_ENV,\n    DATABASE_URL: process.env.DATABASE_URL,\n    SHOPIFY_API_KEY: process.env.SHOPIFY_API_KEY,\n    SHOPIFY_API_SECRET: process.env.SHOPIFY_API_SECRET,\n    SHOPIFY_SCOPES: process.env.SHOPIFY_SCOPES,\n    SHOPIFY_APP_URL: process.env.SHOPIFY_APP_URL,\n    SHOPIFY_REDIRECT_PATH: process.env.SHOPIFY_REDIRECT_PATH,\n    EMAIL_SERVER_HOST: process.env.EMAIL_SERVER_HOST,\n    EMAIL_SERVER_PORT: process.env.EMAIL_SERVER_PORT,\n    EMAIL_SERVER_USER: process.env.EMAIL_SERVER_USER,\n    EMAIL_SERVER_PASSWORD: process.env.EMAIL_SERVER_PASSWORD,\n    EMAIL_FROM: process.env.EMAIL_FROM,\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n    NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n  });\n  if (!parsed.success) {\n    console.error('Invalid environment variables', parsed.error.flatten().fieldErrors);\n    throw new Error('Invalid environment variables');\n  }\n  cachedEnv = parsed.data;\n  return cachedEnv;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,YAAY,0QAAC,CAAC,MAAM,CAAC;IACzB,UAAU,0QAAC,CAAC,IAAI,CAAC;QAAC;QAAe;QAAQ;KAAa,EAAE,OAAO,CAAC;IAChE,cAAc,0QAAC,CAAC,MAAM,GAAG,GAAG;IAC5B,iBAAiB,0QAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAChC,oBAAoB,0QAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACnC,gBAAgB,0QAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC/B,iBAAiB,0QAAC,CAAC,MAAM,GAAG,GAAG;IAC/B,uBAAuB,0QAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC1C,iDAAiD;IACjD,mBAAmB,0QAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,mBAAmB,0QAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,mBAAmB,0QAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,uBAAuB,0QAAC,CAAC,MAAM,GAAG,QAAQ;IAC1C,YAAY,0QAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,iBAAiB,0QAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,cAAc,0QAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;AACzC;AAIA,IAAI,YAAwB;AAErB,SAAS;IACd,IAAI,WAAW,OAAO;IACtB,MAAM,SAAS,UAAU,SAAS,CAAC;QACjC,QAAQ;QACR,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,oBAAoB,QAAQ,GAAG,CAAC,kBAAkB;QAClD,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,YAAY,QAAQ,GAAG,CAAC,UAAU;QAClC,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,cAAc,QAAQ,GAAG,CAAC,YAAY;IACxC;IACA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,QAAQ,KAAK,CAAC,iCAAiC,OAAO,KAAK,CAAC,OAAO,GAAG,WAAW;QACjF,MAAM,IAAI,MAAM;IAClB;IACA,YAAY,OAAO,IAAI;IACvB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///Users/vishnuadithya/Documents/xeno/shopify-mt/apps/frontend/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { getEnv } from './env';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport function getPrisma(): PrismaClient {\n  // Ensure env parsed (side-effect to validate early)\n  getEnv();\n  if (global.prisma) return global.prisma;\n  const client = new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error']\n  });\n  global.prisma = client;\n  return client;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,SAAS;IACd,oDAAoD;IACpD,IAAA,uLAAM;IACN,IAAI,OAAO,MAAM,EAAE,OAAO,OAAO,MAAM;IACvC,MAAM,SAAS,IAAI,6IAAY,CAAC;QAC9B,KAAK,uCAAyC;YAAC;YAAS;YAAS;SAAO,GAAG;IAC7E;IACA,OAAO,MAAM,GAAG;IAChB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/vishnuadithya/Documents/xeno/shopify-mt/apps/frontend/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport EmailProvider from 'next-auth/providers/email'\nimport { getPrisma } from './db'\nimport bcrypt from 'bcryptjs'\n\nconst prisma = getPrisma()\n\n// Check if email configuration is available\nconst isEmailConfigured = process.env.EMAIL_SERVER_HOST && \n  process.env.EMAIL_SERVER_PORT && \n  process.env.EMAIL_SERVER_USER && \n  process.env.EMAIL_SERVER_PASSWORD && \n  process.env.EMAIL_FROM\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  secret: process.env.NEXTAUTH_SECRET || 'fallback-secret-for-development',\n  providers: [\n    // Only add EmailProvider if email is properly configured\n    ...(isEmailConfigured ? [EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    })] : []),\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        // For demo purposes, allow specific demo credentials\n        if (credentials.email === 'demo@example.com' && credentials.password === 'demo123') {\n          // Try to find or create demo user\n          let user = await prisma.user.findUnique({\n            where: { email: 'demo@example.com' }\n          }).catch(() => null)\n\n          if (!user) {\n            // Create demo user if it doesn't exist\n            try {\n              user = await prisma.user.create({\n                data: {\n                  email: 'demo@example.com',\n                  name: 'Demo User'\n                }\n              })\n            } catch (error) {\n              console.error('Failed to create demo user:', error)\n              // Return a temporary user object for demo purposes\n              return {\n                id: 'demo-user-id',\n                email: 'demo@example.com',\n                name: 'Demo User'\n              }\n            }\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name || 'Demo User',\n          }\n        }\n\n        // For other credentials, check database\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email }\n        }).catch(() => null)\n\n        if (!user) {\n          return null\n        }\n\n        // For simplicity, accept any password that matches 'demo123'\n        const isPasswordValid = credentials.password === 'demo123'\n\n        if (!isPasswordValid) {\n          return null\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        }\n      }\n    })\n  ],\n  pages: {\n    signIn: '/auth/signin',\n    error: '/auth/error'\n  },\n  session: {\n    strategy: 'jwt'\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token && session?.user) {\n        session.user.id = token.id as string\n      }\n      return session\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;AAGA,MAAM,SAAS,IAAA,yLAAS;AAExB,4CAA4C;AAC5C,MAAM,oBAAoB,QAAQ,GAAG,CAAC,iBAAiB,IACrD,QAAQ,GAAG,CAAC,iBAAiB,IAC7B,QAAQ,GAAG,CAAC,iBAAiB,IAC7B,QAAQ,GAAG,CAAC,qBAAqB,IACjC,QAAQ,GAAG,CAAC,UAAU;AAEjB,MAAM,cAA+B;IAC1C,SAAS,IAAA,waAAa,EAAC;IACvB,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACvC,WAAW;QACT,yDAAyD;WACrD,oBAAoB;YAAC,IAAA,uZAAa,EAAC;gBACrC,QAAQ;oBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM;wBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;wBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;oBACzC;gBACF;gBACA,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC9B;SAAG,GAAG,EAAE;QACR,IAAA,6ZAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,qDAAqD;gBACrD,IAAI,YAAY,KAAK,KAAK,sBAAsB,YAAY,QAAQ,KAAK,WAAW;oBAClF,kCAAkC;oBAClC,IAAI,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;wBACtC,OAAO;4BAAE,OAAO;wBAAmB;oBACrC,GAAG,KAAK,CAAC,IAAM;oBAEf,IAAI,CAAC,MAAM;wBACT,uCAAuC;wBACvC,IAAI;4BACF,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;gCAC9B,MAAM;oCACJ,OAAO;oCACP,MAAM;gCACR;4BACF;wBACF,EAAE,OAAO,OAAO;4BACd,QAAQ,KAAK,CAAC,+BAA+B;4BAC7C,mDAAmD;4BACnD,OAAO;gCACL,IAAI;gCACJ,OAAO;gCACP,MAAM;4BACR;wBACF;oBACF;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI,IAAI;oBACrB;gBACF;gBAEA,wCAAwC;gBACxC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC,GAAG,KAAK,CAAC,IAAM;gBAEf,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,6DAA6D;gBAC7D,MAAM,kBAAkB,YAAY,QAAQ,KAAK;gBAEjD,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,SAAS,MAAM;gBAC1B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///Users/vishnuadithya/Documents/xeno/shopify-mt/apps/frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }\n\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,0YAAQ,EAAC,6LAAW","debugId":null}}]
}